# Copyright (C) 2013-2015 Ragpicker Developers.
# This file is part of Ragpicker Malware Crawler - http://code.google.com/p/malware-crawler/

import json
import logging
import httplib2
import urllib

from core.abstracts import Processing
from utils.multiPartForm import MultiPartForm

try:
    from yapsy.IPlugin import IPlugin
except ImportError:
    raise ImportError, 'Yapsy (Yet Another Plugin System) is required to run this program : http://yapsy.sourceforge.net'

log = logging.getLogger("ProcessingBlueCoatMAA")

MAA_SAMPLE_CREATE_URL = 'https://%s/rapi/samples/basic?token=%s'
MAA_TASK_CREATE_URL = 'https://%s/rapi/tasks?token=%s'

class BlueCoatMAA(IPlugin, Processing):
    
    def run(self, objfile):
        self.key = "BlueCoatMAA"
        self.score = -1
        host = self.options.get("host")
        port = self.options.get("port")
        apikey = self.options.get("apikey")
        owner = self.options.get("user")
        https = self.options.get("https")
        
        returnValue = {}
        
        if not host or not port or not apikey or not owner:
            raise Exception("BlueCoatMAA is not configured correctly")
        
        try:                
            file_extension = '.' + objfile.file.file_extension()
            fileName = objfile.file.get_fileMd5() + file_extension
            rawFile = open(objfile.file.temp_file, 'rb')
            
            message = MultiPartForm()
            message.add_file('unused', fileName, fileHandle=rawFile, mimetype='application/octet-stream')
            message.add_field('owner', owner)
        
            headers = {'Content-type': message.get_content_type()}
            h = httplib2.Http()
            protocol = "http"
            
            if https:
                protocol = "https"
                h = httplib2.Http(".cache", disable_ssl_certificate_validation=True)
            
            
            response, content = h.request('%s://%s/rapi/samples/basic?token=%s' % (protocol, host, apikey), "PUT", 
                                          body=str(message), headers=headers)
        
            data = json.loads(content)
            sample_id = data['results'][0]['samples_sample_id']
            log.debug("%s upload as new sample_id %d" % (fileName, sample_id))
        
            headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        
            parameters = {}
            parameters["sample_id"] = sample_id
            parameters["env"] = 'ivm'
            parameters["log_task"] = 1
            parameters["tp_IVM.TIMEOUT"] = 5
        
            response, content = h.request('%s://%s/rapi/tasks?token=%s' % (protocol, host, apikey), 'PUT', 
                                          body=urllib.urlencode(parameters), headers=headers)
        
            data = json.loads(content)
            task_id = data['results'][0]['tasks_task_id']
            log.debug("new task_id %d" % task_id)
            
            returnValue = {"sample_id":sample_id, "task_id":task_id}
        
            rawFile.close()            
                        
        except Exception as e:
            raise Exception("Failed to send the file to the BlueCoatMAA: %s" % e)

        return returnValue