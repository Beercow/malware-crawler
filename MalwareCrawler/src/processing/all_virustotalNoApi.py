# Copyright (C) 2013-2014 Ragpicker Developers.
# This file is part of Ragpicker Malware Crawler - http://code.google.com/p/malware-crawler/
# -*- coding: utf-8 -*-

import re
import logging

from core.commonutils import uniqueList
from core.abstracts import Processing

try:
    from yapsy.IPlugin import IPlugin
except ImportError:
    raise ImportError, 'Yapsy (Yet Another Plugin System) is required to run this program : http://yapsy.sourceforge.net'

log = logging.getLogger("ProcessingVirustotalNoApi")

VIRUSTOTAL_FILE_URL = 'https://www.virustotal.com/de/search/?query=%s'

TRENNER = [".", ":", "-", "~", "@", "!", "/", "_", ";", "[", "]", "(", ")"]

MAPPING = {" loader":"downloader",
           " risk":"riskware",
           "adware":"riskware",
           "backdoor":"trojan",
           "banker":"trojan",
           "bkdr":"trojan",
           "bundler":"riskware",
           "crypt":"ransomware",
           "cryptor":"ransomware",
           "dldr":"downloader",
           "down ":"downloader",
           "downware":"downloader",
           "grayware":"riskware",
           "hack ":"riskware",
           "hackkms":"riskware",
           "hacktool":"riskware",
           "hktl":"riskware",
           "injector":"trojan",
           "keygen":"riskware",
           "kms":"riskware",
           "krypt":"ransomware",
           "kryptik":"ransomware",
           "load ":"downloader",
           "lock":"ransomware",
           "muldown":"downloader",
           "onlinegames":"riskware",
           "ransom ":"ransomware",
           "rkit":"rootkit",
           "rogue":"riskware",
           "rogueware":"riskware",
           "rtk":"rootkit",
           "scareware":"riskware",
           "startpage":"riskware",
           "suspicious":"riskware",
           "sys":"rootkit",
           "trj":"trojan",
           "troj":"trojan",
           "unwanted":"riskware"}

REPLACE = [" tool",
           "agent",
           "application",
           "backdoor",
           "based",
           "behaves",
           "downloader",
           "dropped",
           "dropper",
           "executor",
           "exploit",
           "gen",
           "generic",
           "genome",
           "heur",
           "heuristic",
           "like",
           "malware",
           "obfuscated",
           "optional",
           "packed",
           "posible",
           "possible",
           "program",
           "ransomware",
           "reputation",
           "riskware",
           "rootkit",
           "suspect",
           "trojan",
           "unclassified",
           "unknown",
           "variant",
           "virus",
           "ware",
           "win32 ",
           "win64",
           "worm"]


class VirustotalNoApi(IPlugin, Processing):
    
    def run(self, objfile):
        self.key = "VirusTotal"
        self.score = -1
        returnValue = {}
        
        # Check file md5
        vt_file = self.processVirusTotalReport(objfile)
        returnValue.update(vt_file)
        
        return returnValue
    
    def _fileFound(self, soup):
        s = soup.find("h2", { "class" : "alert-heading" })

        if s:
            s = str(s)
            i = s.find("Datei nicht gefunden")
            if i > 0:
                return False
        
        return True
    
    def processVirusTotalReport(self, objfile):
        returnValue = {}
        result = {}
        log.debug("MD5=%s" % objfile.file.get_fileMd5())
    
        # parser
        soup = self.parse(VIRUSTOTAL_FILE_URL % objfile.file.get_fileMd5())
        
        # Extract VT-Informations
        if self._fileFound(soup):
            try:
                s = soup.find(text='Erkennungsrate:')
                while getattr(s, 'name', None) != 'td':
                    s = s.next
                
                s = str(s.contents[0])
                s = s.replace('\n', "").replace(' ', "")
                
                s = s.split('/')
                
                positives = s[0]
                total = s[1]
                
                # calculate scoring
                if int(positives) == 0:
                    self.score = 0
                elif int(positives) <= 1:
                    self.score = 5
                elif int(positives) <= 2:
                    self.score = 8
                elif int(positives) >= 3:
                    self.score = 10
                    
                result["positives"] = positives
                result["total"] = total  
            except Exception, e:
                log.error("%s - Error Determining the detection rate" % e)
            
            # Extract Scan-Date            
            result["scan_date"] = self.extractScanDate(soup)
            
            # Extract First submission
            result["first_submission"] = self.extractFirstSubmission(soup)
               
            # Extract File-Names
            result["filenames"] = self.extractFileNames(soup)
            # Extract Malware-Names
            malwarenames = self.extractMalwareNames(soup)
            result["malwarenames"] = malwarenames    
            
            # Normalize Step 1
            names = self.normalizeMalwareNamesStep1(malwarenames)
                
            result["scannerMalwareClassification"] =  {'ransomware':names.count("ransomware"),
                                         'dropper':names.count("dropper"),
                                         'exploit':names.count("exploit"),
                                         'downloader':names.count("downloader"),
                                         'riskware':names.count("riskware"),
                                         'rootkit':names.count("rootkit"),
                                         'worm':names.count("worm"),
                                         'trojan':names.count("trojan")
                                         }
            
            log.debug("scannerMalwareClassification:" + str(result["scannerMalwareClassification"]))
            
            # Normalize Step 2
            names = self.normalizeMalwareNamesStep2(names)
            
            # create Word-Count-Map
            wordCountMap = self.simpleWordFrequency(names)    
            
            result["scannerMalwareFamily"] = self.wordFrequencyReport(wordCountMap)
            log.debug("scannerMalwareFamily:" + str(result["scannerMalwareFamily"]))
        else: 
            result["verbose_msg"] = "File not found on VirusTotal"
            
        returnValue["file"] = result
        log.debug(returnValue)
        return returnValue
    
    def extractFirstSubmission(self, soup):
        # Extract First submission
        try:
            s = soup.find(text="First submission").parent.parent.contents[2]
            s = str(s)
            s = s.replace('\n', "").replace('  ', "")
        except Exception, e:
            log.error("%s - Error Determining the First submission date" % e)
        
        return s
    
    def extractScanDate(self, soup):
        # Extract Scan-Date 
        try:
            scanDate = soup.find(text='Analyse-Datum:')
            while getattr(scanDate, 'name', None) != 'td':
                scanDate = scanDate.next
            
            scanDate = str(scanDate.contents[0])
            scanDate = scanDate.replace('\n', "").replace('  ', "").replace('( ', " ( ")
        except Exception, e:
            log.error("%s - Error Determining the scan date" % e)
        
        return scanDate
    
    def extractFileNames(self, soup):
        # Extract Filenames
        try:
            dateinamen = []
            s = soup.find(text="Dateinamen")
            s = s.parent.parent.parent
            s = s.prettify()
            s = s.replace('<br />', "").replace('\n', "|").replace(' ', "")
            s = s.split("|")
            
            for dateiname in s:
                if "<" not in dateiname and "Dateinamen" not in dateiname and dateiname != "":
                    dateinamen.append(dateiname)
                    
            dateinamen = uniqueList(dateinamen)
        except Exception, e:
            log.error("%s - Error Determining filenames" % e)
        
        return dateinamen
    
    def extractMalwareNames(self, soup):
        # Extract Malware-Names
        try:
            malwarenames = []
            s = soup.findAll("td", { "class" : "ltr text-red" })
            
            for malwarename in s:
                name = malwarename.contents[0]
                name = name.replace('<br />', "").replace('\n', "")
                if "<" not in malwarename and malwarename != "":
                    malwarenames.append(name.strip())
        except Exception, e:
            log.error("%s - Error Determining Malware-Names" % e)
        
        return malwarenames
    
    def wordFrequencyReport(self, wordCount):
        mostFrequentWord = ''
        countWord = 0
        
        for wort, count in sorted(wordCount.iteritems(), key=lambda (k, v):(v, k)):
            if count > countWord:
                mostFrequentWord = wort
                countWord = count
        
        return {"family":mostFrequentWord, "count":countWord}

    def simpleWordFrequency(self, tmpNames):
        # find the most frequently occuring words
        wordCount = {}
        for wort in tmpNames:
            w = wort.strip()
            if len(w) > 0:
                wordCount[w] = wordCount.get(w, 0) + 1
        
        return wordCount
    
    def normalizeMalwareNamesStep2(self, names):
        # sort Replace Map
        REPLACE.sort(key=lambda item:(-len(item), item))
        # delete not usable words
        for r in REPLACE:
            names = names.replace(r, " ")
        
        # delete special characters
        names = "".join(re.findall("[a-z\s]*", names))
        # delete multiple whitespaces
        names = re.sub('\s{2,}', ' ', names)
        # delete small words
        tmpNames = []
        for name in names.strip().split(' '):
            if len(name.strip()) > 3:
                tmpNames.append(name.strip())
        
        return tmpNames
    
    def normalizeMalwareNamesStep1(self, malwarenames):
        # malwarenames-list to string
        names = " ".join(malwarenames)
        for trn in TRENNER:
            names = names.replace(trn, " ").lower()
        
        for key in sorted(MAPPING, key=len, reverse=True):
            names = names.replace(key, MAPPING[key])
        
        return names