#!/usr/bin/python
#                              _        _                
#   _ __   __ _   __ _  _ __  (_)  ___ | | __  ___  _ __ 
#  | '__| / _` | / _` || '_ \ | | / __|| |/ / / _ \| '__|
#  | |   | (_| || (_| || |_) || || (__ |   < |  __/| |   
#  |_|    \__,_| \__, || .__/ |_| \___||_|\_\ \___||_|   
#                |___/ |_|                               
#
# Plugin based malware crawler. 
# Use this tool if you are testing antivirus products, collecting malware 
# for another analyzer/zoo.
# Many thanks to the cuckoo-sandbox team for the Architectural design ideas.
# Includes code from cuckoo-sandbox (c) 2013 http://www.cuckoosandbox.org 
# and mwcrawler, (c) 2012 Ricardo Dias
#
# http://code.google.com/p/malware-crawler/
#
# Robby Zeitfuchs - robby@zeitfuchs.org - 2013-2014
# Mark Lawrenz - Mark.Lawrenz@web.de
#
# any subjection, tips, improvement are welcome
#
# Licence: GNU GPL v.3.0
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

import os
import sys
import json
import logging
import codecs
import shutil
import datetime
import tempfile
import jsonpickle
import zipfile
import argparse

from core.config import Config
from core.database import Database
from core.constants import RAGPICKER_ROOT
from core.commonutils import DatetimeHandler
from core.commonutils import convertDirtyDict2ASCII

log = logging.getLogger("Manager")

def rapickerExport(sha256, dumpDir, database, vxcageHost, vxcagePort):    
    #check sh256
    if (len(sha256.rstrip()) != 64):
        raise Exception("%s is not a sha256!" % sha256) 
           
    try:
        log.info("Export Data for: %s" % sha256)
        
        # dumpDir format
        dumpDir = os.path.normpath(dumpDir) + os.sep
    
        # crate temp-dir
        tmpPath = getTmpPath("export_")
        tmpPath = os.path.normpath(tmpPath) + os.sep
        
        # export file from vxcage -> temp-dir
        exportVxCage(sha256, tmpPath, vxcageHost, vxcagePort)
        
        # export json-report from mongodb -> temp dir
        report = database.getRagpickerReport(sha256)
        writeJsonReport(sha256, tmpPath, report)
        
        # goto tempDir
        os.chdir(tmpPath)
        
        # zip file and report -> dump-dir -> zipfilename = sha256 + .ragpicker
        createExportZip(sha256, dumpDir, tmpPath) 
    finally:
        #goto dumpDir
        os.chdir(dumpDir)
        # finally delete temp-dir
        shutil.rmtree(tmpPath, ignore_errors=True)

def getTmpPath(prefix):
    tmppath = tempfile.gettempdir()
    targetpath = os.path.join(tmppath, "ragpicker-tmp")
    if not os.path.exists(targetpath):
        os.mkdir(targetpath)
        
    tempPath = tempfile.mkdtemp(prefix=prefix, dir=targetpath)    
    return tempPath   

def exportVxCage(sha256, exportDir, host, port):
    if os.path.isfile(exportDir + sha256):
        raise Exception("File %s already exists.") 
    
    cmd = "wget -q --tries=1 --directory-prefix=%s 'http://%s:%s/malware/get/%s'" % (exportDir,host,port,sha256)
    os.system(cmd)

    if not os.path.isfile(exportDir + sha256):
        raise Exception("Download %s failed." % sha256)
    
def writeJsonReport(sha256, exportDir, dbresults):
    fileName = "ragpicker_%s.json" % sha256
    
    try:
        jsonpickle.set_encoder_options('simplejson', indent=4) 
        jsonpickle.handlers.registry.register(datetime.datetime, DatetimeHandler)
        jsonReport = jsonpickle.encode(dbresults)
    except (UnicodeError, TypeError):
        jsonReport = jsonpickle.encode(convertDirtyDict2ASCII(dbresults))
    
    try:  
        if not os.path.exists(exportDir + fileName):
            report = codecs.open(os.path.join(exportDir, fileName), "w", "utf-8")      
            report.write(jsonReport)
            report.close()
    except (TypeError, IOError) as e:
        raise Exception("Failed to generate JSON report: %s" % e)  
    
def createExportZip(sha256, exportDir, tempDir):  
    zipFileName = "export_%s.ragpicker" % sha256
    
    # check file exist 
    if os.path.isfile(os.path.join(exportDir, zipFileName)):
        raise Exception("File %s already exists." % os.path.join(exportDir, zipFileName))  
    
    # creating archive 
    zf = zipfile.ZipFile(os.path.join(exportDir, zipFileName), mode='w')
    
    # Zip iles in tempdir
    try:
        for f in os.listdir(tempDir):
            zf.write(f)
    finally:
        zf.close()

if __name__ == '__main__':    
    # Datenbank
    database = Database()
    #Config-Parameter
    cfgReporting = Config(os.path.join(RAGPICKER_ROOT, 'config', 'reporting.conf'))
    vxcageEnabled = cfgReporting.getOption("vxcage", "enabled")  
    vxcageHost = cfgReporting.getOption("vxcage", "host")
    vxcagePort = cfgReporting.getOption("vxcage", "port")       
        
    parser = argparse.ArgumentParser(description='Ragpicker Manager')
    subparsers = parser.add_subparsers(title='subcommands', description='valid subcommands', help='additional help')
    parser_export = subparsers.add_parser('export', help='Export Ragpicker-Data')
    parser_export.set_defaults(which='export')
    parser_export.add_argument('-d','--dirname', required=True, help='Export-Directory')
    parser_export.add_argument('-f','--sha256_file', required=True, help='SHA256-File')
    parser_export.add_argument('--json', default=False, help='File in json-format? Default=False')
    
    parser_import = subparsers.add_parser('import', help='Import Ragpicker-Data')
    parser_import.set_defaults(which='import')
    parser_import.add_argument('dirname', help='Directory with Ragpicker-data')
    args = vars(parser.parse_args())
    
    # config logger
    log_conf = dict(level=logging.INFO,
        format='%(levelname)s %(name)s %(module)s:%(lineno)d %(message)s')
    logging.basicConfig(**log_conf)
    
    # check mongodb and vxcage enebled
    if not database.isRagpickerDBEnabled():
        log.error("Sorry: MongoDB for Ragpicker is not enabled!")
        sys.exit()
    if not vxcageEnabled:
        log.error("Sorry: VxCage for Ragpicker is not enabled!")
        sys.exit()  
        
    if args['which'] == 'export':
        log.info("Exporting {} {}".format(args['dirname'], args['sha256_file']))
        dumpDir = os.path.normpath(args['dirname']) + os.sep
        
        file = open(args['sha256_file'],"r")
        
        if args['json']:
            data = json.load(file)
            for sha256 in data.itervalues():
                try:
                    rapickerExport(sha256.rstrip(), dumpDir, database, vxcageHost, vxcagePort)  
                except (Exception) as e:
                    log.error("Export-Error: %s" % e)
        else:
            for sha256 in file:        
                try:
                    rapickerExport(sha256.rstrip(), dumpDir, database, vxcageHost, vxcagePort)  
                except (Exception) as e:
                    log.error("Export-Error: %s" % e)
        file.close()
    elif args['which'] == 'import':
        log.info("Importing {}".format(args['dirname']))

    log.info("Success.")
    sys.exit()