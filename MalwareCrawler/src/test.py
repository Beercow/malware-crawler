#!/usr/bin/env python
import re
import sys
import utils.pefile as pefile

FILE = "/mnt/hgfs/Downloads/peCarve/test/_test1.bin"
DUMP_DIR = "/mnt/hgfs/Downloads/peCarve/test/"

class CARVER():
    def __init__(self):
        self.carve()


    def writeFile(self, count, pe):
        'write file to working directory'
        name = ''
        try:
            out  = open(DUMP_DIR + "carve-" + str(count)+ '.bin', 'wb')
        except:
            print '\t[FILE ERROR] could not write file'
            sys.exit()
            
        # get size of trimmed file using PE
        trimmedPE = pe.trim()
        out.write(trimmedPE)
        out.close()

    def carve(self):    
        fileH = ''
            
        # read the file into a buffer
        try:
            fileH = open(FILE, 'rb')
            buffer = fileH.read()
        except:
            print '\t[FILE ERROR] could not access file: %s' % sys.argv[1]
            sys.exit()
            
        # carve out embeddded executables
        c = 1
        # For each address that contains MZ
        for y in [tmp.start() for tmp in re.finditer('\x4d\x5a', buffer)]:
            fileH.seek(y)
            
            # MZ on offset 0x0
            if y == 0:
                continue
            
            try:
                pe = pefile.PE(data=fileH.read())
            except:
                # Failed to parse EXE
                continue
          
            print 'PE found at offset', hex(y)
            
            self.writeFile(c, pe)
            
            c += 1
            fileH.seek(0)
            pe.close()

if __name__== '__main__':
    CARVER()