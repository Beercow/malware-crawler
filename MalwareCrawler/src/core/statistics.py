# Copyright (C) 2013-2014 Ragpicker Developers.
# This file is part of Ragpicker Malware Crawler - http://code.google.com/p/malware-crawler/

import os
import sys
from core.config import Config
from core.constants import RAGPICKER_ROOT

try:
    from pymongo.connection import Connection
    from pymongo.errors import ConnectionFailure
except ImportError:
    raise Exception("PyMongo is required for working with MongoDB: http://api.mongodb.org/python/current/")

try:
    from prettytable import PrettyTable
except ImportError:
    raise Exception("PrettyTable is required for using statistics: https://code.google.com/p/prettytable/")

class Statistics():
    
    def __init__(self):
        #Kofiguration aus der reporting.conf holen
        self.__cfgReporting = Config(os.path.join(RAGPICKER_ROOT, 'config', 'reporting.conf'))
        self.__mongodbEnabled = self.__cfgReporting.getOption("mongodb", "enabled")
        self.__mongodbHost = self.__cfgReporting.getOption("mongodb", "host")
        self.__mongodbPort = self.__cfgReporting.getOption("mongodb", "port")
        self.__vxcageEnabled = self.__cfgReporting.getOption("vxcage", "enabled")
        self.__vxcageHost = self.__cfgReporting.getOption("vxcage", "host")
        self.__vxcagePort = self.__cfgReporting.getOption("vxcage", "port")
        self.__codedbEnabled = self.__cfgReporting.getOption("codeDB", "enabled")
        self.__codedbHost = self.__cfgReporting.getOption("codeDB", "mongo_db_host")
        self.__codedbPort = self.__cfgReporting.getOption("codeDB", "mongo_db_port")
        
        #Anbindung an Datenbank MongoDB Collection Ragpicker herstellen
        try:
            self.__mongodbConnection = Connection(self.__mongodbHost, self.__mongodbPort)
            self.__mongodbCollectionRagpicker = self.__mongodbConnection.MalwareAnalyse.ragpicker
        except TypeError:
            raise Exception("MongoDB connection port in report.config must be integer")
        except ConnectionFailure:
            raise Exception("Cannot connect to MongoDB (ragpicker)")
        
        #Anbindung an Datenbank MongoDB Collection CodeDB herstellen
        if self.__codedbEnabled:
            try:
                self.__codedbConnection = Connection(self.__mongodbHost, self.__mongodbPort)
                self.__codedbCollectionCodedb = self.__mongodbConnection.MalwareAnalyse.codeDB
            except TypeError:
                raise Exception("MongoDB connection port for CodeDB in report.config must be integer")
            except ConnectionFailure:
                raise Exception("Cannot connect to MongoDB (codeDB)")
     
    def __del__(self):
        self.__mongodbConnection.disconnect()
        self.__codedbConnection.disconnect()
               
    def runStatisticsLong(self):
        
        #Pruefen ob VxCage und MongoDB aktiviert sind
        if self.__mongodbEnabled:
            if self.__vxcageEnabled:
                self.__runStatisticsMongodbLong()
                
                if self.__codedbEnabled:
                    self.__runStatisticsCodedb()
            else:
                print("vxcage in reporting.conf is not enabled")
                sys.stdout.flush()
        else:
            print("mongodb in reporting.conf is not enabled")
            sys.stdout.flush()
            
    def runStatisticsShort(self):
        
        #Pruefen ob VxCage und MongoDB aktiviert sind
        if self.__mongodbEnabled:
            if self.__vxcageEnabled:
                self.__runStatisticsMongodbShort()
                
                if self.__codedbEnabled:
                    self.__runStatisticsCodedb()
            else:
                print("vxcage in reporting.conf is not enabled")
                sys.stdout.flush()
        else:
            print("mongodb in reporting.conf is not enabled")
            sys.stdout.flush()

    def __runStatisticsMongodbLong(self):
        print "**************************************"
        print "*** Statistics MongoDB (Ragpicker) ***"
        print "**************************************"
        print ""
        
        print "Number of malware samples in database:", self.__mongodbCollectionRagpicker.count()
        print ""
        
        #Statistiken der eingesetzten AV-Produkte 
        self.__runStatisticsAVProducts()
        
        #Liste und Haeufigkeit der Filetypes
        self.__runStatisticsFiletypes()
        
        #Haeufigkeit der PE Charakteristiken
        self.__runStatisticsPeCharacteristics()
        
        #Liste und Haeufigkeit der verwendeten Packer/Compiler in der Malware
        self.__runStatisticsPackerCompiler()
        
        #Liste der verwendeten digitalen Signaturen     
        self.__runStatisticsPackerSignatures()
        
        sys.stdout.flush()
        
    def __runStatisticsMongodbShort(self):  
        print "**************************************"
        print "*** Statistics MongoDB (Ragpicker) ***"
        print "**************************************"
        print ""
        
        print "Number of malware samples in database:", self.__mongodbCollectionRagpicker.count()
        print ""  
        
        #Liste und Haeufigkeit der Filetypes
        self.__runStatisticsFiletypes()
        
        #Haeufigkeit der PE Charakteristiken
        self.__runStatisticsPeCharacteristics()
                
        sys.stdout.flush()
        
    def __runStatisticsCodedb(self):
        print "***********************************"
        print "*** Statistics MongoDB (CodeDB) ***"
        print "***********************************"
        print ""
        print "Number of malware samples in database:", self.__codedbCollectionCodedb.count()
        
        print ""
        sys.stdout.flush()
        
        
    def __runStatisticsFiletypes(self):   
        #Liste und Haeufigkeit der Filetypes
        print "Filetypes of malware"
        res = self.__mongodbCollectionRagpicker.aggregate([{ '$group' : {'_id' : '$Info.file.type', 'count' : { '$sum': 1 } }}, {'$sort':{'count': -1}}])
          
        table = PrettyTable(["filetype", "count"])
        table.align["filetype"] = "l"
        table.align["count"] = "c"
        table.padding_width = 1
                
        try:
            for values in res['result']:
                
                if values.get("_id"):
                    outputPacker = values.get("_id")
                    outputCount = str(values.get("count"))
                    table.add_row([outputPacker, outputCount])
            
            print(table)
                    
        except KeyError:
            raise Exception("Dict has no key 'result' ")  
       
        print ""

    def __runStatisticsPeCharacteristics(self):   
        #Haeufigkeit der PE Charakteristiken
        print "PE-Characteristics of malware"
        
        exe = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"Info.file.EXE" : True}, {"Info.file.DLL" : False}, {"Info.file.DRIVER" : False}]}).count())
        dll = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"Info.file.EXE" : False}, {"Info.file.DLL" : True}, {"Info.file.DRIVER" : False}]}).count())
        driver = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"Info.file.EXE" : False}, {"Info.file.DLL" : False}, {"Info.file.DRIVER" : True}]}).count())
        noPe = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"Info.file.EXE" : None}, {"Info.file.DLL" : None}, {"Info.file.DRIVER" : None}]}).count())
        dllDriver = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"Info.file.EXE" : False}, {"Info.file.DLL" : True}, {"Info.file.DRIVER" : True}]}).count())
        
        table = PrettyTable(["pe-characteristics", "count"])
        table.align["pe-characteristics"] = "l"
        table.align["count"] = "c"
        table.padding_width = 1
        table.add_row(["EXE", exe])        
        table.add_row(["DLL", dll])
        table.add_row(["Driver", driver])
        table.add_row(["DLL/Driver", dllDriver])
        table.add_row(["No PE File", noPe])
          
        print (table)
        print ""

    def __runStatisticsPackerCompiler(self): 
        #Liste und Haeufigkeit der verwendeten Packer/Compiler in der Malware
        print "Packer/compiler used in malware"
        res = self.__mongodbCollectionRagpicker.aggregate([{ '$group' : {'_id' : '$PEID', 'count' : { '$sum': 1 } }}, {'$sort':{'count': -1}}])
        
        table = PrettyTable(["packer/compiler", "count"])
        table.align["packer/compiler"] = "l"
        table.align["count"] = "c"
        table.padding_width = 1
        
        try:
            for values in res['result']:
                
                if values.get("_id"):
                    outputPacker = values.get("_id")[0]
                    outputCount = str(values.get("count"))
                    table.add_row([outputPacker, outputCount])
            
            print(table)
                    
        except KeyError:
            raise Exception("Dict has no key 'result' ")    
        
        print " "
        
    def __runStatisticsPackerSignatures(self): 
        #Liste der verwendeten digitalen Signaturen    
        print "Signatures used by malware"
        res = self.__mongodbCollectionRagpicker.aggregate([{ '$group' : {'_id' : { 'PublisherO': "$VerifySigs.PublisherO", 'Issuer': "$VerifySigs.Issuer" }, 'count' : { '$sum': 1 }}},{'$sort':{"count": -1}}])

        table = PrettyTable(["publisher", "issuer", "count"])
        table.align["publisher"] = "l"
        table.align["issuer"] = "l"
        table.align["count"] = "c"
        table.padding_width = 1
        
        
        try:
            for values in res['result']:
                
                if values.get("_id"):
                    
                    outputPublisher = values.get("_id").get("PublisherO")
                    
                    if values.get("_id").get("Issuer"):
                        outputIssuer = values.get("_id").get("Issuer")
                    else:
                        outputIssuer = " "
                    
                    outputCount = str(values.get("count"))
            
                    table.add_row([outputPublisher, outputIssuer, outputCount])
                            
            print(table)
   
        except KeyError:
            raise Exception("Dict has no key 'result' ")    
        
        print ""
        
    def __runStatisticsAVProducts(self): 
        #Statistiken der eingesetzten AV-Produkte 
        
        #VirusTotal und lokale AV-Produkte
        print "VirusTotal and local AV-Products"
        print "   Samples rated as none-malware by all AV-Products at time of crawling:", self.__mongodbCollectionRagpicker.find({ "$and": [{ "$or": [{"AntivirusScanAvg.Avg" : "OK"}, {"AntivirusScanAvg" : None}]},
                                                                                                                                            { "$or": [{"AntivirusScanAvira.Avira.scan" : "OK"}, {"AntivirusScanAvira" : None}]},
                                                                                                                                            { "$or": [{"AntivirusScanBitDefender.BitDefender" : "OK"}, {"AntivirusScanBitDefender" : None}]},
                                                                                                                                            { "$or": [{"AntivirusScanClamAv.ClamAv" : " OK"}, {"AntivirusScanClamAv" : None}]},
                                                                                                                                            { "$or": [{"AntivirusScanCOMODO.COMODO" : "OK"}, {"AntivirusScanCOMODO" : None}]},
                                                                                                                                            { "$or": [{"AntivirusScanFProt.FProt" : "OK"}, {"AntivirusScanFProt" : None}]},
                                                                                                                                            { "$or": [{"AntivirusScanF-Secure.F-Secure" : "OK"}, {"AntivirusScanF-Secure" : None}]},
                                                                                                                                            {"VirusTotal.file.verbose_msg" : {"$ne":None}}]}).count()
        print ""
        
        #VirusTotal
        print "VirusTotal"
        print "   Samples analyzed at time of crawling:", self.__mongodbCollectionRagpicker.find({"VirusTotal" : {"$ne":None}}).count()
        print "   Samples not analyzed at time of crawling:", self.__mongodbCollectionRagpicker.find({"VirusTotal" : None}).count()
        print "   Samples found at time of crawling:", self.__mongodbCollectionRagpicker.find({"VirusTotal.file.positives" : {"$ne":None}}).count()
        print "   Samples not found at time of crawling:", self.__mongodbCollectionRagpicker.find({"VirusTotal.file.verbose_msg" : {"$ne":None}}).count()
        print ""
        
        #Lokale AV-Produkte
        print "Local AV-Products"
        print "   analyzed     => Samples analyzed at time of crawling"
        print "   not analyzed => Samples not analyzed at time of crawling"
        print "   malware      => Samples rated as malware at time of crawling"
        print "   none-malware => Samples rated as none-malware at time of crawling"
                
        table = PrettyTable(["product", "analyzed", "not analyzed", "malware", "none-malware"])
        table.align["product"] = "l"
        table.align["analyzed"] = "c"
        table.align["not analyzed"] = "c"
        table.align["malware"] = "c"
        table.align["none-malware"] = "c"
        table.padding_width = 1
        
        #AVG
        product = "AVG Antivirus"
        analyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvg" : {"$ne":None}}).count())
        notanalyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvg" : None}).count())
        malware = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanAvg" : {"$ne":None}}, {"AntivirusScanAvg.Avg" : {"$ne": "OK"}}]}).count())
        nonemalware = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvg.Avg" : "OK"}).count())
        table.add_row([product, analyzed, notanalyzed, malware, nonemalware])
                
        #Avira
        product = "Avira"
        analyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvira" : {"$ne":None}}).count())
        notanalyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvira" : None}).count())
        malware = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanAvira" : {"$ne":None}}, {"AntivirusScanAvira.Avira.scan" : {"$ne": "OK"}}]}).count())
        nonemalware = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvira.Avira.scan" : "OK"}).count())
        table.add_row([product, analyzed, notanalyzed, malware, nonemalware])
        
        #BitDefender
        product = "BitDefender"
        analyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanBitDefender" : {"$ne":None}}).count())
        notanalyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanBitDefender" : None}).count())
        malware = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanBitDefender" : {"$ne":None}}, {"AntivirusScanBitDefender.BitDefender" : {"$ne": "OK"}}]}).count())
        nonemalware = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanBitDefender.BitDefender" : "OK"}).count())
        table.add_row([product, analyzed, notanalyzed, malware, nonemalware])
        
        #ClamAV
        product = "ClamAV"
        analyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanClamAv" : {"$ne":None}}).count())
        notanalyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanClamAv" : None}).count())
        malware = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanClamAv" : {"$ne":None}}, {"AntivirusScanClamAv.ClamAv" : {"$ne": " OK"}}]}).count())
        nonemalware = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanClamAv.ClamAv" : " OK"}).count())
        table.add_row([product, analyzed, notanalyzed, malware, nonemalware])
        
        #COMODO
        product = "COMODO"
        analyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanCOMODO" : {"$ne":None}}).count())
        notanalyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanCOMODO" : None}).count())
        malware = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanCOMODO" : {"$ne":None}}, {"AntivirusScanCOMODO.COMODO" : {"$ne": "OK"}}]}).count())
        nonemalware = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanCOMODO.COMODO" : "OK"}).count())
        table.add_row([product, analyzed, notanalyzed, malware, nonemalware])
        
        #F-Prot
        product = "F-Prot"
        analyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanFProt" : {"$ne":None}}).count())
        notanalyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanFProt" : None}).count())
        malware = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanFProt" : {"$ne":None}}, {"AntivirusScanFProt.FProt" : {"$ne": "OK"}}]}).count())
        nonemalware = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanFProt.FProt" : "OK"}).count())
        table.add_row([product, analyzed, notanalyzed, malware, nonemalware])
        
        #F-Secure
        product = "F-Secure"
        analyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanF-Secure" : {"$ne":None}}).count())
        notanalyzed = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanF-Secure" : None}).count())
        malware = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanF-Secure" : {"$ne":None}}, {"AntivirusScanF-Secure.F-Secure" : {"$ne": "OK"}}]}).count())
        nonemalware = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanF-Secure.F-Secure" : "OK"}).count())
        table.add_row([product, analyzed, notanalyzed, malware, nonemalware])
        
        print(table)
        print ""