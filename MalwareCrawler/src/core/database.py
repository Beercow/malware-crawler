# Copyright (C) 2013-2014 Ragpicker Developers.
# This file is part of Ragpicker Malware Crawler - http://code.google.com/p/malware-crawler/

import os
import logging
from core.commonutils import convertDirtyDict2ASCII
from core.config import Config
from core.constants import RAGPICKER_ROOT

try:
    from pymongo.connection import Connection
    from pymongo.errors import ConnectionFailure, InvalidStringData
except ImportError:
    raise Exception("PyMongo is required for working with MongoDB: http://api.mongodb.org/python/current/")

def singleton(class_):
    instances = {}
    def getinstance(*args, **kwargs):
        if class_ not in instances:
            instances[class_] = class_(*args, **kwargs)
        return instances[class_]
    return getinstance
  
log = logging.getLogger("Database")  
  
@singleton
class Database():

    def __init__(self):
        self.__cfgReporting = Config(os.path.join(RAGPICKER_ROOT, 'config', 'reporting.conf'))
        self.__mongodbEnabled = self.__cfgReporting.getOption("mongodb", "enabled")
        self.__codedbEnabled = self.__cfgReporting.getOption("codeDB", "enabled")
        
        if self.__mongodbEnabled:
            #Anbindung an Datenbank MongoDB Collection Ragpicker herstellen
            try:
                mongodbHost = self.__cfgReporting.getOption("mongodb", "host")
                mongodbPort = self.__cfgReporting.getOption("mongodb", "port")
                self.__mongodbConnection = Connection(mongodbHost, mongodbPort)
                self.__mongodbCollectionRagpicker = self.__mongodbConnection.MalwareAnalyse.ragpicker
            except TypeError:
                raise Exception("MongoDB connection port in report.config must be integer")
            except ConnectionFailure:
                raise Exception("Cannot connect to MongoDB (ragpicker)")
        
        if self.__codedbEnabled:
            #Anbindung an Datenbank MongoDB Collection CodeDB herstellen
            try:
                codedbHost = self.__cfgReporting.getOption("codeDB", "mongo_db_host")
                codedbPort = self.__cfgReporting.getOption("codeDB", "mongo_db_port")
                self.__codedbConnection = Connection(codedbHost, codedbPort)
                self.__codedbCollectionCodedb = self.__codedbConnection.MalwareAnalyse.codeDB
            except TypeError:
                raise Exception("MongoDB connection port for CodeDB in report.config must be integer")
            except ConnectionFailure:
                raise Exception("Cannot connect to MongoDB (codeDB)")

    def __del__(self):
        if self.__mongodbEnabled:
            self.__mongodbConnection.disconnect()
        if self.__codedbEnabled:
            self.__codedbConnection.disconnect()
    
# ------------------------------------------------------------------------------
# Ragpicker Database (MongoDB)
# ------------------------------------------------------------------------------    
    def isRagpickerDBEnabled(self):
        return self.__mongodbEnabled
    
    def getStatisticsAntivirus(self):
        ret = []
        # Avast Antivirus Statistics
        av = {}
        av["product"] = "Avast Antivirus"
        av["analyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvast" : {"$ne":None}}).count())
        av["notanalyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvast" : None}).count())
        av["malware"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanAvast" : {"$ne":None}}, {"AntivirusScanAvast.avast" : {"$ne": "OK"}}]}).count())
        av["nonemalware"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvast.avast" : "OK"}).count())
        av["rate"] = str(round((float(av.get("malware"))/float(av.get("analyzed"))*100),2))+ " %"
        ret.append(av)
        # AVG Antivirus Statistics
        av = {}
        av["product"] = "AVG Antivirus"
        av["analyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvg" : {"$ne":None}}).count())
        av["notanalyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvg" : None}).count())
        av["malware"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanAvg" : {"$ne":None}}, {"AntivirusScanAvg.Avg" : {"$ne": "OK"}}]}).count())
        av["nonemalware"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvg.Avg" : "OK"}).count())   
        av["rate"] = str(round((float(av.get("malware"))/float(av.get("analyzed"))*100),2))+ " %"  
        ret.append(av)
        # Avira Antivirus Statistics
        av = {}
        av["product"] = "Avira"
        av["analyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvira" : {"$ne":None}}).count())
        av["notanalyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvira" : None}).count())
        av["malware"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanAvira" : {"$ne":None}}, {"AntivirusScanAvira.Avira.scan" : {"$ne": "OK"}}]}).count())
        av["nonemalware"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanAvira.Avira.scan" : "OK"}).count())
        av["rate"] = str(round((float(av.get("malware"))/float(av.get("analyzed"))*100),2))+ " %"
        ret.append(av)
        # BitDefender Antivirus Statistics
        av = {}
        av["product"] = "BitDefender"
        av["analyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanBitDefender" : {"$ne":None}}).count())
        av["notanalyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanBitDefender" : None}).count())
        av["malware"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanBitDefender" : {"$ne":None}}, {"AntivirusScanBitDefender.BitDefender" : {"$ne": "OK"}}]}).count())
        av["nonemalware"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanBitDefender.BitDefender" : "OK"}).count()) 
        av["rate"] = str(round((float(av.get("malware"))/float(av.get("analyzed"))*100),2))+ " %"      
        ret.append(av)
        # ClamAv Antivirus Statistics
        av = {}
        av["product"] = "ClamAV"
        av["analyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanClamAv" : {"$ne":None}}).count())
        av["notanalyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanClamAv" : None}).count())
        av["malware"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanClamAv" : {"$ne":None}}, {"AntivirusScanClamAv.ClamAv" : {"$ne": " OK"}}]}).count())
        av["nonemalware"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanClamAv.ClamAv" : " OK"}).count())
        av["rate"] = str(round((float(av.get("malware"))/float(av.get("analyzed"))*100),2))+ " %"
        ret.append(av)
        # COMODO Antivirus Statistics
        av = {}
        av["product"] = "COMODO"
        av["analyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanCOMODO" : {"$ne":None}}).count())
        av["notanalyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanCOMODO" : None}).count())
        av["malware"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanCOMODO" : {"$ne":None}}, {"AntivirusScanCOMODO.COMODO" : {"$ne": "OK"}}]}).count())
        av["nonemalware"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanCOMODO.COMODO" : "OK"}).count()) 
        av["rate"] = str(round((float(av.get("malware"))/float(av.get("analyzed"))*100),2))+ " %"   
        ret.append(av)
        # ESET Antivirus Statistics
        av = {}
        av["product"] = "ESET"
        av["analyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanESET" : {"$ne":None}}).count())
        av["notanalyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanESET" : None}).count())
        av["malware"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanESET" : {"$ne":None}}, {"AntivirusScanESET.ESET" : {"$ne": "OK"}}]}).count())
        av["nonemalware"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanESET.ESET" : "OK"}).count()) 
        av["rate"] = str(round((float(av.get("malware"))/float(av.get("analyzed"))*100),2))+ " %"   
        ret.append(av)
        # F-Prot Antivirus Statistics
        av = {}
        av["product"] = "F-Prot"
        av["analyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanFProt" : {"$ne":None}}).count())
        av["notanalyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanFProt" : None}).count())
        av["malware"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanFProt" : {"$ne":None}}, {"AntivirusScanFProt.FProt" : {"$ne": "OK"}}]}).count())
        av["nonemalware"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanFProt.FProt" : "OK"}).count())
        av["rate"] = str(round((float(av.get("malware"))/float(av.get("analyzed"))*100),2))+ " %"
        ret.append(av)
        # F-Secure Antivirus Statistics
        av = {}
        av["product"] = "F-Secure"
        av["analyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanF-Secure" : {"$ne":None}}).count())
        av["notanalyzed"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanF-Secure" : None}).count())
        av["malware"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"AntivirusScanF-Secure" : {"$ne":None}}, {"AntivirusScanF-Secure.F-Secure" : {"$ne": "OK"}}]}).count())
        av["nonemalware"] = str(self.__mongodbCollectionRagpicker.find({"AntivirusScanF-Secure.F-Secure" : "OK"}).count())
        av["rate"] = str(round((float(av.get("malware"))/float(av.get("analyzed"))*100),2))+ " %"
        ret.append(av)
        
        return ret
    
    def getStatisticsNoneMalwareByAV(self):
        return self.__mongodbCollectionRagpicker.find({ "$and": [{ "$or": [{"AntivirusScanAvast.avast" : "OK"}, {"AntivirusScanAvast" : None}]},
                                                        { "$or": [{"AntivirusScanAvg.Avg" : "OK"}, {"AntivirusScanAvg" : None}]},
                                                        { "$or": [{"AntivirusScanAvira.Avira.scan" : "OK"}, {"AntivirusScanAvira" : None}]},
                                                        { "$or": [{"AntivirusScanBitDefender.BitDefender" : "OK"}, {"AntivirusScanBitDefender" : None}]},
                                                        { "$or": [{"AntivirusScanClamAv.ClamAv" : " OK"}, {"AntivirusScanClamAv" : None}]},
                                                        { "$or": [{"AntivirusScanCOMODO.COMODO" : "OK"}, {"AntivirusScanCOMODO" : None}]},
                                                        { "$or": [{"AntivirusScanESET.ESET" : "OK"}, {"AntivirusScanESET" : None}]},
                                                        { "$or": [{"AntivirusScanFProt.FProt" : "OK"}, {"AntivirusScanFProt" : None}]},
                                                        { "$or": [{"AntivirusScanF-Secure.F-Secure" : "OK"}, {"AntivirusScanF-Secure" : None}]},
                                                        {"VirusTotal.file.verbose_msg" : {"$ne":None}}]}).count()
    def getStatisticsVirusTotal(self):
        ret = {}
        ret["analyzed"] = self.__mongodbCollectionRagpicker.find({"VirusTotal" : {"$ne":None}}).count()
        ret["notAnalyzed"] = self.__mongodbCollectionRagpicker.find({"VirusTotal" : None}).count()
        ret["samplesFound"] = self.__mongodbCollectionRagpicker.find({"VirusTotal.file.positives" : {"$ne":None}}).count()
        ret["SamplesNotFound"] = self.__mongodbCollectionRagpicker.find({"VirusTotal.file.verbose_msg" : {"$ne":None}}).count()        
        return ret
    
    def getStatisticsPackerSignatures(self):
        return self.__mongodbCollectionRagpicker.aggregate([{ '$group' : {'_id' : { 'PublisherO': "$VerifySigs.PublisherO", 'Issuer': "$VerifySigs.Issuer" }, 'count' : { '$sum': 1 }}},{'$sort':{"count": -1}}])
    
    def getStatisticsPackerCompiler(self):
        return self.__mongodbCollectionRagpicker.aggregate([{ '$group' : {'_id' : '$PEID', 'count' : { '$sum': 1 } }}, {'$sort':{'count': -1}}])
    
    def getStatisticsPeCharacteristics(self):
        ret = {}
        ret["exe"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"Info.file.EXE" : True}, {"Info.file.DLL" : False}, {"Info.file.DRIVER" : False}]}).count())
        ret["dll"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"Info.file.EXE" : False}, {"Info.file.DLL" : True}, {"Info.file.DRIVER" : False}]}).count())
        ret["driver"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"Info.file.EXE" : False}, {"Info.file.DLL" : False}, {"Info.file.DRIVER" : True}]}).count())
        ret["noPe"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"Info.file.EXE" : None}, {"Info.file.DLL" : None}, {"Info.file.DRIVER" : None}]}).count())
        ret["dllDriver"] = str(self.__mongodbCollectionRagpicker.find({ "$and": [{"Info.file.EXE" : False}, {"Info.file.DLL" : True}, {"Info.file.DRIVER" : True}]}).count())        
        return ret
    
    def getFiletypes(self):
        return self.__mongodbCollectionRagpicker.aggregate([{ '$group' : {'_id' : '$Info.file.type', 'count' : { '$sum': 1 } }}, {'$sort':{'count': -1}}])
    
    def countReportsRagpickerDB(self):
        return self.__mongodbCollectionRagpicker.find().count()
    
    # Attention deletes the whole Ragpicker-Database!!!
    # returns number of deleted reports 
    def deleteRagpickerDB(self):
        count = self.countRagpickerDB()
        # Alle Ragpicker-Daten aus der MongoDB loeschen
        self.__mongodbCollectionRagpicker.remove()
        return count
    
    #Insert Ragpicker-Report in MongoDB
    def insertRagpickerDB(self, report):
        # Store the report
        try:
            self.__mongodbCollectionRagpicker.insert(report)
        except InvalidStringData:
            self.__mongodbCollectionRagpicker.insert(convertDirtyDict2ASCII(report))
          
    #Count Ragpicker-Reports by file (and url)   
    def countRagpickerDB(self, file_md5, url_md5=None):
        if url_md5:
            query = { "$and" : [{ "Info.url.md5": { "$in": [url_md5] } }, { "Info.file.md5": { "$in": [file_md5] } }]}
        else:
            query = { "$and" : [{ "Info.file.md5": { "$in": [file_md5] } }]}
        
        return self.__mongodbCollectionRagpicker.find(query).count()
    
# ------------------------------------------------------------------------------
# CodeDB Database (MongoDB)
# ------------------------------------------------------------------------------

    def isCodeDBEnabled(self):
        return self.__codedbEnabled

    def countReportsCodeDB(self):
        return self.__codedbCollectionCodedb.find().count()

    # Attention deletes the whole CodeDB-Database!!!
    # returns number of deleted reports 
    def deleteCodeDB(self):
        count = self.__codedbCollectionCodedb.find().count()
        # Alle CodeDB-Reports aus der MongoDB loeschen
        self.__codedbCollectionCodedb.remove()
        return count
    
    #Count CodeDB-Reports by file sha256
    def countCodeDB(self, file_sha256):
        return self.__codedbCollectionCodedb.find({ "sha256" : file_sha256}).count()
    
    #Insert CodeDB-Report in MongoDB
    def insertCodeDB(self, report):
        # Store the report
        try:
            self.__codedbCollectionCodedb.insert(report)
        except InvalidStringData:
            self.__codedbCollectionCodedb.insert(convertDirtyDict2ASCII(report))
    